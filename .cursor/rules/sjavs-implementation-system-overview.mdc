---
description: 
globs: 
alwaysApply: false
---
# Sjavs Implementation System Overview

## Table of Contents
1. [System Architecture Overview](mdc:#system-architecture-overview)
2. [Game Flow Implementation](mdc:#game-flow-implementation)
3. [Component Integration Map](mdc:#component-integration-map)
4. [Data Flow & State Management](mdc:#data-flow--state-management)
5. [Authentication & Player Management](mdc:#authentication--player-management)
6. [Match Lifecycle Implementation](mdc:#match-lifecycle-implementation)
7. [Card System Implementation](mdc:#card-system-implementation)
8. [Trump Selection Phase](mdc:#trump-selection-phase)
9. [Trick-Taking Phase](mdc:#trick-taking-phase)
10. [Scoring & Cross System](mdc:#scoring--cross-system)
11. [Real-Time Communication](mdc:#real-time-communication)
12. [Anti-Cheat & Validation](mdc:#anti-cheat--validation)
13. [Performance & Scalability](mdc:#performance--scalability)

## System Architecture Overview

### High-Level Architecture
```
┌─────────────────────────────────────────────────────────────────┐
│                    SJAVS BACKEND SYSTEM                        │
├─────────────────────────────────────────────────────────────────┤
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌─────────┐ │
│  │   HTTP API  │  │  WebSocket  │  │    Auth     │  │  Redis  │ │
│  │ (REST/JSON) │  │ (Real-time) │  │   (JWT)     │  │ (State) │ │
│  └─────────────┘  └─────────────┘  └─────────────┘  └─────────┘ │
├─────────────────────────────────────────────────────────────────┤
│                    GAME LOGIC LAYER                            │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌─────────┐ │
│  │    Match    │  │    Card     │  │   Trick     │  │  Cross  │ │
│  │ Management  │  │   System    │  │   Logic     │  │ Scoring │ │
│  └─────────────┘  └─────────────┘  └─────────────┘  └─────────┘ │
├─────────────────────────────────────────────────────────────────┤
│                   PERSISTENCE LAYER                            │
│  ┌─────────────────────────────────────────────────────────────┐ │
│  │                    REDIS STORAGE                           │ │
│  │  • Game State    • Player Data    • Trick State           │ │
│  │  • Cross Scores  • Hand Storage   • WebSocket Sessions    │ │
│  └─────────────────────────────────────────────────────────────┘ │
└─────────────────────────────────────────────────────────────────┘
```

### Core Technology Stack
- **Backend Framework**: Rust + Axum (high-performance async)
- **Authentication**: JWT with Clerk.com integration + JWKS caching
- **Real-time**: WebSocket connections with Redis PubSub
- **State Storage**: Redis with connection pooling (30 connections)
- **API Documentation**: OpenAPI 3.0 with Swagger UI
- **Deployment**: Designed for 1000+ concurrent users

## Game Flow Implementation

### Complete Game Lifecycle
```mermaid
graph TD
    A[Player Authentication] --> B[Create/Join Match]
    B --> C[Wait for 4 Players]
    C --> D[Game Start & Card Dealing]
    D --> E[Trump Selection Phase]
    E --> F{Bidding Complete?}
    F -->|No| G[Next Player Bids/Passes]
    G --> F
    F -->|Yes| H[Trick-Taking Phase]
    H --> I[Play Card]
    I --> J{Trick Complete?}
    J -->|No| K[Next Player Turn]
    K --> I
    J -->|Yes| L{8 Tricks Done?}
    L -->|No| M[Start Next Trick]
    M --> I
    L -->|Yes| N[Calculate Sjavs Score]
    N --> O[Update Cross/Rubber]
    O --> P{Cross Complete?}
    P -->|No| Q[Start New Game]
    Q --> D
    P -->|Yes| R[Match Complete]
```

### State Transitions
```rust
pub enum NormalMatchStatus {
    Waiting,     // Players joining
    Dealing,     // Cards being dealt  
    Bidding,     // Trump selection phase
    Playing,     // Trick-taking phase
    Completed,   // Game finished
    Cancelled,   // Match cancelled
}
```

## Component Integration Map

### Module Dependencies
```
src/
├── main.rs                    # Application entry point
├── api/
│   ├── mod.rs                # API module coordinator  
│   ├── schemas.rs            # Request/Response types
│   └── handlers/             # HTTP endpoint handlers
│       ├── normal_match.rs   # Match creation/management
│       ├── game_start.rs     # Card dealing & game initialization
│       ├── game_bidding.rs   # Trump selection endpoints
│       ├── game_trick.rs     # Card playing endpoints
│       └── game_scoring.rs   # Game completion & scoring
├── game/                     # Core game logic (stateless)
│   ├── mod.rs               # Game module coordinator
│   ├── card.rs              # Card system & trump hierarchy
│   ├── deck.rs              # Deck management & dealing
│   ├── hand.rs              # Player hand management
│   ├── trick.rs             # Trick-taking logic
│   ├── scoring.rs           # Sjavs scoring engine
│   └── cross.rs             # Cross/Rubber system
├── redis/                   # State persistence layer
│   ├── mod.rs              # Redis module coordinator
│   ├── normal_match/       # Match state storage
│   ├── game_state/         # Hand & card storage
│   ├── trick_state/        # Trick state storage
│   ├── cross_state/        # Cross/Rubber storage
│   ├── player/             # Player-game associations
│   ├── pubsub/             # Real-time broadcasting
│   └── notification/       # Event notifications
├── websocket/              # Real-time communication
│   ├── mod.rs             # WebSocket coordinator
│   ├── handler.rs         # Connection management
│   └── events/            # Event broadcasting
└── auth/                  # Authentication system
    ├── mod.rs            # Auth module coordinator
    ├── jwt.rs            # JWT validation
    └── clerk.rs          # Clerk.com integration
```

### Integration Flow
1. **HTTP Request** → Authentication → Handler → Game Logic → Redis Storage
2. **State Change** → Redis PubSub → WebSocket Broadcasting → All Players
3. **Game Logic** → Stateless computation → State persistence → Event emission

## Data Flow & State Management

### Redis Data Architecture
```
Redis Keys & Data Structures:

┌─────────────────────────────────────────────────────────────────┐
│                      MATCH MANAGEMENT                          │
├─────────────────────────────────────────────────────────────────┤
│ normal_match:{match_id}                  # Match state & config │
│ normal_match:{match_id}:players          # Player associations  │
│ player_games                             # User → Game mapping  │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                     GAME STATE STORAGE                         │
├─────────────────────────────────────────────────────────────────┤
│ game_hands:{game_id}:{position}          # Individual hands     │
│ game_hand_analysis:{game_id}:{position}  # Trump count data     │
│ game_trump_declarer:{game_id}            # Bidding winner       │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                    TRICK-TAKING STATE                          │
├─────────────────────────────────────────────────────────────────┤
│ game_trick_state:{game_id}               # Current trick data   │
│ game_trick_history:{game_id}:{num}       # Completed tricks     │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                   CROSS/RUBBER SCORING                         │
├─────────────────────────────────────────────────────────────────┤
│ cross_state:{match_id}                   # Cross/Rubber state   │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                  REAL-TIME COMMUNICATION                       │
├─────────────────────────────────────────────────────────────────┤
│ pubsub:game:{game_id}                    # Game event channel   │
│ pubsub:match:{match_id}                  # Match event channel  │
│ websocket_sessions:{user_id}             # Connection tracking  │
└─────────────────────────────────────────────────────────────────┘
```

### State Consistency Strategy
- **Single Source of Truth**: Redis holds authoritative game state
- **Optimistic Updates**: Validate on server, update immediately
- **Event Sourcing**: All changes generate broadcast events
- **Conflict Resolution**: Last write wins with timestamp validation

## Authentication & Player Management

### JWT Authentication Flow
```
1. Frontend → Clerk.com (Login/Registration)
2. Clerk → JWT Token (with user claims)
3. Frontend → Sjavs Backend (Token in Authorization header)
4. Backend → JWKS Validation (Cached for 24h, rate limited)
5. Backend → Extract user_id from validated token
6. Backend → Associate user_id with game actions
```

### JWKS Caching Strategy
```rust
// High-performance auth with 99% cache hit rate
pub struct JwksCache {
    cache: Arc<RwLock<HashMap<String, Jwk>>>,
    last_fetch: Arc<RwLock<Instant>>,
    rate_limiter: Arc<RwLock<RateLimiter>>, // 5min intervals
}

// Performance: 1ms cached vs 100ms+ network fetch
```

### Player-Game Association
```rust
// Redis mapping: user_id → current_game_id
HSET player_games "user123" "game456"

// Game players: game_id → player list with positions
HSET normal_match:game456:players "user123" "0"  // Position 0
HSET normal_match:game456:players "user789" "1"  // Position 1
```

## Match Lifecycle Implementation

### 1. Match Creation (`POST /normal-match`)
```rust
// Handler: src/api/handlers/normal_match.rs
pub async fn create_match_handler() {
    // 1. Validate authenticated user
    // 2. Create NormalMatch with Waiting status
    // 3. Store in Redis: normal_match:{match_id}
    // 4. Associate host with match
    // 5. Return match details
}

// Data Structure:
pub struct NormalMatch {
    pub id: String,
    pub host_user_id: String,
    pub status: NormalMatchStatus,
    pub players: Vec<String>,           // 4 player user_ids
    pub dealer_position: Option<usize>, // 0-3
    pub current_leader: Option<usize>,  // Current turn player
    pub trump_suit: Option<String>,     // hearts/diamonds/clubs/spades
    pub trump_declarer: Option<usize>,  // Winner of bidding
}
```

### 2. Match Joining (`POST /normal-match/{id}/join`)
```rust
// Handler: src/api/handlers/normal_match_join.rs
pub async fn join_match_handler() {
    // 1. Validate match exists and has space
    // 2. Add player to match.players
    // 3. Update Redis state
    // 4. Broadcast player_joined event
    // 5. Auto-start if 4 players reached
}
```

### 3. Game Start (`POST /game/start`)
```rust
// Handler: src/api/handlers/game_start.rs
pub async fn start_game_handler() {
    // 1. Validate 4 players present
    // 2. Transition: Waiting → Dealing
    // 3. Deal cards until valid hands (5+ trumps somewhere)
    // 4. Store hands in Redis per player
    // 5. Set random dealer position
    // 6. Transition: Dealing → Bidding
    // 7. Broadcast game_started event
}
```

## Card System Implementation

### Sjavs 32-Card Deck
```rust
// Standard deck minus 2-6 in each suit
pub fn create_sjavs_deck() -> Vec<Card> {
    let suits = [Suit::Hearts, Suit::Diamonds, Suit::Clubs, Suit::Spades];
    let ranks = [Rank::Seven, Rank::Eight, Rank::Nine, Rank::Ten, 
                 Rank::Jack, Rank::Queen, Rank::King, Rank::Ace];
    // Creates 32 cards total (8 per suit)
}
```

### Trump Hierarchy Implementation
```rust
// Permanent trumps (always trump regardless of suit)
const PERMANENT_TRUMPS: [(Suit, Rank); 6] = [
    (Suit::Clubs, Rank::Queen),    // Highest permanent trump
    (Suit::Spades, Rank::Queen),   // Second highest
    (Suit::Clubs, Rank::Jack),     // Third highest
    (Suit::Spades, Rank::Jack),    // Fourth highest  
    (Suit::Hearts, Rank::Jack),    // Fifth highest
    (Suit::Diamonds, Rank::Jack),  // Sixth highest
];

// Trump order calculation
impl Card {
    pub fn trump_order(&self, trump_suit: Suit) -> Option<u8> {
        // 1. Check permanent trumps (1-6)
        // 2. Check trump suit cards (7-14)
        // 3. Non-trump cards return None
    }
    
    pub fn beats(&self, other: &Card, trump_suit: Suit, lead_suit: Suit) -> bool {
        // Authentic Sjavs card comparison logic
        // Handles trump hierarchy, suit following, point values
    }
}
```

### Hand Management
```rust
pub struct Hand {
    pub cards: Vec<Card>,
    pub player_position: usize,
}

impl Hand {
    pub fn count_trumps(&self, trump_suit: Suit) -> u8 {
        // Count permanent trumps + trump suit cards
    }
    
    pub fn get_available_bids(&self) -> Vec<u8> {
        // Return valid bid lengths (5-12 trumps)
    }
    
    pub fn get_playable_cards(&self, trump_suit: Suit, lead_suit: Option<Suit>) -> Vec<Card> {
        // Follow suit logic for trick-taking
    }
}
```

## Trump Selection Phase

### Bidding System Implementation
```rust
// Handler: src/api/handlers/game_bidding.rs

// POST /game/bid
pub async fn bid_handler() {
    // 1. Validate player's turn to bid
    // 2. Validate bid length against hand trumps
    // 3. Check bid is higher than current (clubs beats same length)
    // 4. Update match state with bid
    // 5. Advance to next player or complete bidding
    // 6. Broadcast bid_made event
}

// POST /game/pass  
pub async fn pass_handler() {
    // 1. Record player pass
    // 2. Check if all players passed (redeal)
    // 3. Advance to next player or complete bidding
    // 4. Broadcast pass_made event
}
```

### Bidding Validation Logic
```rust
impl NormalMatch {
    pub fn validate_bid(&self, player_pos: usize, bid_length: u8, trump_count: u8) -> Result<(), String> {
        // 1. Check turn order
        // 2. Validate trump count ≥ bid_length
        // 3. Compare with current highest bid
        // 4. Apply club preference rule
    }
    
    pub fn complete_bidding(&mut self) -> Result<(u8, String, usize), String> {
        // 1. Determine winning bidder and trump suit
        // 2. Set trump_declarer and trump_suit
        // 3. Transition to Playing state
        // 4. Set current_leader (left of dealer)
        // 5. Return (bid_length, trump_suit, declarer)
    }
}
```

### Club Preference Rule
```rust
// Clubs beat other suits at same bid length
fn compare_bids(current_bid: (u8, String), new_bid: (u8, String)) -> Ordering {
    match new_bid.0.cmp(&current_bid.0) {
        Ordering::Greater => Ordering::Greater,    // Higher bid wins
        Ordering::Less => Ordering::Less,         // Lower bid loses
        Ordering::Equal => {                      // Same length
            if new_bid.1 == "clubs" && current_bid.1 != "clubs" {
                Ordering::Greater  // Clubs wins at same length
            } else {
                Ordering::Less     // Same length, first bidder wins
            }
        }
    }
}
```

## Trick-Taking Phase

### Trick State Management
```rust
pub struct TrickState {
    pub trick_number: u8,              // 1-8
    pub lead_suit: Option<Suit>,       // First card played
    pub cards_played: Vec<(usize, Card)>, // (player_pos, card)
    pub current_player: usize,         // Whose turn to play
    pub trick_winner: Option<usize>,   // Winner after 4 cards
    pub is_complete: bool,            // All 4 cards played
}

pub struct GameTrickState {
    pub current_trick: TrickState,
    pub tricks_won: (u8, u8),         // (trump_team, opponents)
    pub points_accumulated: (u8, u8),  // Card points per team
    pub trump_team: (usize, usize),   // Partnership positions
    pub game_complete: bool,          // All 8 tricks done
}
```

### Card Playing Implementation
```rust
// Handler: src/api/handlers/game_trick.rs

// POST /game/play-card
pub async fn play_card_handler() {
    // 1. Validate player's turn
    // 2. Parse and validate card code
    // 3. Check player owns the card
    // 4. Validate legal play (follow suit)
    // 5. Remove card from hand
    // 6. Add card to current trick
    // 7. Check trick completion
    // 8. Update trick state in Redis
    // 9. Broadcast card_played event
}
```

### Follow Suit Validation
```rust
impl TrickState {
    pub fn get_legal_cards(&self, player_hand: &[Card]) -> Vec<Card> {
        if let Some(lead_suit) = self.lead_suit {
            // Must follow suit if possible
            let same_suit_cards: Vec<Card> = player_hand
                .iter()
                .filter(|card| card.suit == lead_suit)
                .cloned()
                .collect();
                
            if !same_suit_cards.is_empty() {
                same_suit_cards  // Must follow suit
            } else {
                player_hand.to_vec()  // Can play any card
            }
        } else {
            player_hand.to_vec()  // First card - any card legal
        }
    }
}
```

### Trick Winner Determination
```rust
impl TrickState {
    fn determine_winner(&self) -> usize {
        let trump_suit = Suit::from(self.trump_suit.as_str());
        let lead_suit = self.lead_suit.expect("Lead suit must be set");
        
        let mut best_player = self.cards_played[0].0;
        let mut best_card = &self.cards_played[0].1;
        
        for (player, card) in &self.cards_played[1..] {
            if card.beats(best_card, trump_suit, lead_suit) {
                best_player = *player;
                best_card = card;
            }
        }
        
        best_player  // Winner leads next trick
    }
}
```

## Scoring & Cross System

### Sjavs Scoring Engine
```rust
pub struct SjavsScoring {
    pub trump_team_points: u8,    // Points won by trump team (0-120)
    pub opponent_team_points: u8, // Points won by opponents (0-120)
    pub trump_team_tricks: u8,    // Tricks won by trump team (0-8)
    pub opponent_team_tricks: u8, // Tricks won by opponents (0-8)
    pub trump_suit: String,       // For club bonus calculation
    pub individual_vol: bool,     // Single player won all tricks
}

impl SjavsScoring {
    pub fn calculate_game_result(&self) -> GameResult {
        let is_clubs = self.trump_suit == "clubs";
        
        // Vol scoring (all 8 tricks)
        if self.trump_team_tricks == 8 {
            if self.individual_vol {
                GameResult {
                    trump_team_score: if is_clubs { 24 } else { 16 },
                    result_type: SjavsResult::IndividualVol,
                }
            } else {
                GameResult {
                    trump_team_score: if is_clubs { 16 } else { 12 },
                    result_type: SjavsResult::Vol,
                }
            }
        }
        // Normal scoring based on points...
    }
}
```

### Cross/Rubber System
```rust
pub struct CrossState {
    pub trump_team_score: i8,     // Starts at 24, counts down
    pub opponent_team_score: i8,  // Starts at 24, counts down
    pub trump_team_crosses: u8,   // Crosses won
    pub opponent_team_crosses: u8, // Crosses won
    pub next_game_bonus: u8,      // From tie games
    pub rubber_complete: bool,    // Match finished
}

impl CrossState {
    pub fn apply_game_result(&mut self, game_result: &GameResult) -> CrossResult {
        // 1. Apply bonus points from previous ties
        // 2. Subtract game points from team scores
        // 3. Check for cross completion (score ≤ 0)
        // 4. Detect double victories (opponent still at 24)
        // 5. Handle 60-60 ties (+2 bonus for next game)
    }
}
```

### Scoring Integration Flow
```
Trick Completion → Point Calculation → Game Completion Check
        ↓
8 Tricks Complete → Sjavs Scoring Engine → Game Result
        ↓
Cross State Update → Cross Completion Check → Match Result
        ↓
WebSocket Broadcast → All Players Notified
```

## Real-Time Communication

### WebSocket Event System
```rust
// Event types broadcast to all players
pub enum GameEvent {
    PlayerJoined { user_id: String, position: u8 },
    GameStarted { dealer_position: u8 },
    BidMade { player_position: u8, bid_length: u8, trump_suit: String },
    PlayerPassed { player_position: u8 },
    BiddingComplete { winner: u8, trump_suit: String },
    CardPlayed { player_position: u8, card_code: String, trick_number: u8 },
    TrickComplete { winner: u8, points: u8, next_leader: u8 },
    GameComplete { result: GameResult, cross_scores: CrossScores },
    MatchComplete { winner: CrossWinner },
}
```

### Broadcasting Implementation
```rust
// Redis PubSub channels
// pubsub:game:{game_id} - Game events
// pubsub:match:{match_id} - Match events

pub async fn broadcast_to_game(
    conn: &mut RedisConnection,
    game_id: &str,
    event_data: &serde_json::Value
) -> Result<(), String> {
    let channel = format!("pubsub:game:{}", game_id);
    let message = serde_json::to_string(event_data)?;
    
    conn.publish(&channel, &message).await?;
    Ok(())
}
```

### WebSocket Connection Management
```rust
// Connection tracking per user
HSET websocket_sessions "user123" "connection_id_456"

// Event delivery
1. Game state changes
2. Redis PubSub broadcast  
3. WebSocket manager receives
4. Deliver to connected clients
5. Handle disconnections gracefully
```

## Anti-Cheat & Validation

### Server-Side Validation Strategy
```
┌─────────────────────────────────────────────────────────────┐
│                    VALIDATION LAYERS                       │
├─────────────────────────────────────────────────────────────┤
│ 1. Authentication   │ JWT token validation                  │
│ 2. Authorization    │ Player in game, correct turn         │  
│ 3. Game State       │ Valid game phase for action          │
│ 4. Business Logic   │ Follow suit, bid validation, etc.    │
│ 5. State Consistency│ Redis as single source of truth      │
└─────────────────────────────────────────────────────────────┘
```

### Cheat Prevention Measures
```rust
// 1. Card Ownership Validation
pub fn validate_card_ownership(hand: &Hand, card: &Card) -> bool {
    hand.cards.contains(card)
}

// 2. Turn Order Enforcement  
pub fn validate_turn(game: &NormalMatch, player_pos: usize) -> bool {
    game.current_leader == Some(player_pos)
}

// 3. Follow Suit Enforcement
pub fn validate_legal_play(trick: &TrickState, hand: &Hand, card: &Card) -> bool {
    let legal_cards = trick.get_legal_cards(&hand.cards);
    legal_cards.contains(card)
}

// 4. Trump Count Validation
pub fn validate_bid_trump_count(hand: &Hand, bid_length: u8, trump_suit: Suit) -> bool {
    hand.count_trumps(trump_suit) >= bid_length
}
```

### Audit Trail
```rust
// All game actions logged with timestamps
pub struct GameAction {
    pub timestamp: i64,
    pub game_id: String,
    pub user_id: String,
    pub action_type: String,
    pub action_data: serde_json::Value,
    pub result: ActionResult,
}

// Stored in Redis for replay/debugging
LPUSH game_audit:{game_id} "{serialized_action}"
```

## Performance & Scalability

### Redis Connection Pooling
```rust
// High-performance connection management
pub struct RedisPool {
    pool: deadpool_redis::Pool,
}

// Configuration for 1000+ concurrent users
deadpool_redis::Config {
    max_size: 30,           // 30 connections in pool
    timeouts: Timeouts {
        wait: Some(Duration::from_secs(5)),
        create: Some(Duration::from_secs(5)),
        recycle: Some(Duration::from_secs(1)),
    },
}
```

### JWKS Caching Strategy
```rust
// Reduces auth overhead by 99%
pub struct AuthCache {
    jwks_cache: HashMap<String, Jwk>,     // 24h TTL
    rate_limiter: RateLimiter,            // 5min fetch intervals
    hit_rate: AtomicU64,                  // Monitoring
}

// Performance metrics:
// Cache Hit: ~1ms response time
// Cache Miss: ~100ms+ (network fetch)
// Target: 99%+ hit rate in production
```

### Memory Optimization
```rust
// Efficient data structures
pub struct CompactCard(u8);  // Single byte per card
pub struct CompactHand {
    cards: Vec<CompactCard>,    // 8 bytes max per hand
    position: u8,              // 1 byte
}

// Redis key expiration
EXPIRE game_trick_state:{game_id} 86400  // 24h cleanup
EXPIRE cross_state:{match_id} 604800     // 7d cleanup
```

### Horizontal Scaling Readiness
```rust
// Stateless design
pub struct SjavsServer {
    redis_pool: RedisPool,      // Shared state
    auth_cache: AuthCache,      // Local cache
    // No game state stored in memory
}

// Load balancing support
// - Redis as shared state store
// - WebSocket sticky sessions
// - JWT stateless authentication
// - Pub/Sub for cross-instance communication
```

## Performance Metrics & Monitoring

### Key Performance Indicators
```
┌─────────────────────────────────────────────────────────────┐
│                   PERFORMANCE TARGETS                      │
├─────────────────────────────────────────────────────────────┤
│ Concurrent Users    │ 1000+ simultaneous players          │
│ Response Time       │ <100ms for game actions             │
│ WebSocket Latency   │ <50ms for real-time events         │
│ Redis Operations    │ <5ms average                        │
│ Memory Usage        │ <100MB per 1000 users              │
│ Auth Cache Hit Rate │ >99% (JWKS caching)                │
└─────────────────────────────────────────────────────────────┘
```

### Monitoring Strategy
```rust
// Metrics collection
pub struct GameMetrics {
    games_created: AtomicU64,
    games_completed: AtomicU64, 
    average_game_duration: AtomicU64,
    active_players: AtomicU64,
    redis_operation_time: Histogram,
    websocket_message_rate: AtomicU64,
}

// Health checks
pub async fn health_check() -> HealthStatus {
    // 1. Redis connectivity
    // 2. JWKS availability  
    // 3. Memory usage
    // 4. Active connections
}
```

## System Integration Summary

### How It All Connects
```
Authentication (JWT) → Player Actions → Game Logic → State Updates → Event Broadcasting
        ↑                     ↓              ↓             ↓               ↓
    Clerk.com            HTTP/WebSocket    Rust Game     Redis Store   WebSocket Clients
                              ↓           Modules           ↓               ↓
                         Validation    (Stateless)    Persistence    Real-time Updates
                              ↓              ↓             ↓               ↓
                        Error Handling  Business Rules  Data Integrity  Player Feedback
```

### Data Consistency Model
1. **Write**: Player action → Validation → Redis update → Event broadcast
2. **Read**: Redis as source of truth → Consistent views across all clients  
3. **Conflict**: Last write wins with timestamp validation
4. **Recovery**: Redis persistence + audit trail for state reconstruction

### Cultural Authenticity Preservation
- **Traditional Rules**: 100% authentic Sjavs scoring and gameplay
- **Faroese Terminology**: Proper use of traditional terms
- **Game Flow**: Maintains traditional Sjavs pacing and patterns
- **Club Preference**: Traditional double scoring for club trump
- **Cross System**: Authentic 24-point countdown rubber system

This implementation successfully bridges **traditional Faroese Sjavs culture** with **modern scalable technology**, creating a platform that preserves cultural authenticity while supporting global accessibility and high-performance gameplay for 1000+ concurrent users.
