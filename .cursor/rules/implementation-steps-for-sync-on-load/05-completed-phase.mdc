---
description: 
globs: 
alwaysApply: false
---
# Step 5: Completed Phase - Final State Implementation

## Overview
Implement initial state synchronization for the Completed phase, which shows final game results, cross scores, and new game options.

## Goals
- Display complete game results and scoring
- Show cross/rubber progression and winners
- Provide new game initiation options
- Handle match completion scenarios

## Key Components

### **1. Completed Phase State Structure**
```rust
pub struct CompletedStateData {
    pub common: CommonStateData,
    pub final_scores: GameResult,
    pub cross_scores: CrossScores,
    pub winner_info: Option<WinnerInfo>,
    pub can_start_new_game: bool,
}

pub struct GameResult {
    pub result_type: String,                     // "Vol", "Normal Win", "Individual Vol"
    pub description: String,                     // Detailed result description
    pub trump_team_score: u8,                    // Points awarded to trump team
    pub opponent_team_score: u8,                 // Points awarded to opponents
    pub individual_vol: bool,                    // Single player won all tricks
    pub trump_team_final_points: u8,             // Final card points (0-120)
    pub opponent_team_final_points: u8,          // Final card points (0-120)
    pub trump_team_tricks: u8,                   // Tricks won (0-8)
    pub opponent_team_tricks: u8,                // Tricks won (0-8)
    pub trump_suit: String,                      // Trump suit for this game
}

pub struct CrossScores {
    pub trump_team_remaining: i8,                // Points left (starts at 24)
    pub opponent_team_remaining: i8,             // Points left (starts at 24)
    pub trump_team_on_hook: bool,                // At 6 points or less
    pub opponent_team_on_hook: bool,             // At 6 points or less
    pub trump_team_crosses: u8,                  // Crosses won this rubber
    pub opponent_team_crosses: u8,               // Crosses won this rubber
}

pub struct WinnerInfo {
    pub winning_team: String,                    // "trump_team" or "opponents"
    pub winning_players: Vec<PlayerInfo>,        // Players on winning team
    pub double_victory: bool,                    // Opponent still at 24 points
}
```

### **2. Implementation Tasks**

#### **2.1 Game Results Fetching**
```rust
impl StateBuilder {
    async fn build_game_results(
        game_id: &str,
        redis_conn: &mut Connection,
    ) -> Result<GameResult, Box<dyn std::error::Error>> {
        // Get final game scoring from Redis
        let results_key = format!("game_results:{}", game_id);
        let results_data: Option<String> = redis::cmd("GET")
            .arg(&results_key)
            .query_async(redis_conn)
            .await?;
        
        if let Some(data) = results_data {
            let stored_results: StoredGameResult = serde_json::from_str(&data)?;
            
            Ok(GameResult {
                result_type: stored_results.result_type,
                description: stored_results.description,
                trump_team_score: stored_results.trump_team_score,
                opponent_team_score: stored_results.opponent_team_score,
                individual_vol: stored_results.individual_vol,
                trump_team_final_points: stored_results.trump_team_final_points,
                opponent_team_final_points: stored_results.opponent_team_final_points,
                trump_team_tricks: stored_results.trump_team_tricks,
                opponent_team_tricks: stored_results.opponent_team_tricks,
                trump_suit: stored_results.trump_suit,
            })
        } else {
            Err("Game results not found - game may not be completed".into())
        }
    }
}
```

#### **2.2 Cross Scores Fetching**
```rust
impl StateBuilder {
    async fn build_cross_scores(
        match_id: &str,
        redis_conn: &mut Connection,
    ) -> Result<CrossScores, Box<dyn std::error::Error>> {
        // Get cross state from Redis
        let cross_key = format!("cross_state:{}", match_id);
        let cross_data: Option<String> = redis::cmd("GET")
            .arg(&cross_key)
            .query_async(redis_conn)
            .await?;
        
        if let Some(data) = cross_data {
            let stored_cross: StoredCrossState = serde_json::from_str(&data)?;
            
            Ok(CrossScores {
                trump_team_remaining: stored_cross.trump_team_remaining,
                opponent_team_remaining: stored_cross.opponent_team_remaining,
                trump_team_on_hook: stored_cross.trump_team_remaining <= 6,
                opponent_team_on_hook: stored_cross.opponent_team_remaining <= 6,
                trump_team_crosses: stored_cross.trump_team_crosses,
                opponent_team_crosses: stored_cross.opponent_team_crosses,
            })
        } else {
            // Default cross state (new rubber)
            Ok(CrossScores {
                trump_team_remaining: 24,
                opponent_team_remaining: 24,
                trump_team_on_hook: false,
                opponent_team_on_hook: false,
                trump_team_crosses: 0,
                opponent_team_crosses: 0,
            })
        }
    }
}
```

#### **2.3 Winner Information Building**
```rust
impl StateBuilder {
    async fn build_winner_info(
        game_results: &GameResult,
        cross_scores: &CrossScores,
        game_id: &str,
        redis_conn: &mut Connection,
    ) -> Result<Option<WinnerInfo>, Box<dyn std::error::Error>> {
        // Check if a cross (rubber) was won
        if cross_scores.trump_team_remaining <= 0 || cross_scores.opponent_team_remaining <= 0 {
            let winning_team = if cross_scores.trump_team_remaining <= 0 {
                "trump_team"
            } else {
                "opponents"
            };
            
            // Get winning players
            let players = PlayerRepository::get_players_in_game(redis_conn, game_id).await?;
            let mut winning_players = Vec::new();
            
            // Build trump partnerships to determine winning players
            let trump_info = Self::build_trump_info(game_id, redis_conn).await?;
            
            let team_players = if winning_team == "trump_team" {
                trump_info.partnership.trump_team
            } else {
                trump_info.partnership.opponent_team
            };
            
            // Check for double victory (opponent still at 24)
            let double_victory = if winning_team == "trump_team" {
                cross_scores.opponent_team_remaining == 24
            } else {
                cross_scores.trump_team_remaining == 24
            };
            
            Ok(Some(WinnerInfo {
                winning_team: winning_team.to_string(),
                winning_players: team_players,
                double_victory,
            }))
        } else {
            // Game complete but no cross winner yet
            Ok(None)
        }
    }
}
```

#### **2.4 New Game Availability Check**
```rust
impl StateBuilder {
    async fn can_start_new_game(
        game_id: &str,
        user_id: &str,
        cross_scores: &CrossScores,
        redis_conn: &mut Connection,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        // Only host can start new game
        let is_host = Self::is_host(redis_conn, game_id, user_id).await?;
        if !is_host {
            return Ok(false);
        }
        
        // Can start new game if cross is not yet won
        let cross_not_complete = cross_scores.trump_team_remaining > 0 
            && cross_scores.opponent_team_remaining > 0;
        
        // Must have 4 players
        let player_count = Self::count_players(redis_conn, game_id).await?;
        let has_enough_players = player_count >= 4;
        
        Ok(cross_not_complete && has_enough_players)
    }
}
```

#### **2.5 Complete Completed State Builder**
```rust
impl StateBuilder {
    pub async fn build_completed_state(
        game_id: &str,
        user_id: &str,
        timestamp: i64,
        redis_conn: &mut Connection,
    ) -> Result<CompletedStateData, Box<dyn std::error::Error>> {
        // Build common state
        let common_state = Self::build_common_state(game_id, timestamp, redis_conn).await?;
        
        // Get match ID for cross scores
        let match_id = &common_state.match_info.id;
        
        // Parallel fetch of game results and cross scores
        let (final_scores, cross_scores) = tokio::try_join!(
            Self::build_game_results(game_id, redis_conn),
            Self::build_cross_scores(match_id, redis_conn)
        )?;
        
        // Build winner information
        let winner_info = Self::build_winner_info(
            &final_scores, 
            &cross_scores, 
            game_id, 
            redis_conn
        ).await?;
        
        // Check if new game can be started
        let can_start_new_game = Self::can_start_new_game(
            game_id, 
            user_id, 
            &cross_scores, 
            redis_conn
        ).await?;
        
        Ok(CompletedStateData {
            common: common_state,
            final_scores,
            cross_scores,
            winner_info,
            can_start_new_game,
        })
    }
}
```

### **3. Join Event Handler Update**

#### **3.1 Completed State Handler**
```rust
// In src/websocket/events/join.rs

async fn send_completed_initial_state(
    state: &Arc<AppState>,
    game_id: &str,
    user_id: &str,
    timestamp: i64,
    redis_conn: &mut Connection,
) -> Result<(), Box<dyn std::error::Error>> {
    // Build completed state
    let completed_state = StateBuilder::build_completed_state(
        game_id, 
        user_id, 
        timestamp, 
        redis_conn
    ).await?;

    // Create initial state message
    let message = GameMessage::new(
        "initial_state_completed".to_string(),
        serde_json::to_value(&completed_state)?
    )
    .with_game_id(game_id.to_string())
    .with_phase("completed".to_string())
    .with_timestamp(timestamp);

    // Send to specific user
    if let Some(tx) = state.user_connections.get(user_id) {
        let msg_text = serde_json::to_string(&message)?;
        tx.send(axum::extract::ws::Message::Text(msg_text)).await?;
    }

    Ok(())
}
```

### **4. Client-Side Integration**

#### **4.1 Completed Phase Handler**
```typescript
interface CompletedState {
    common: CommonState;
    final_scores: GameResult;
    cross_scores: CrossScores;
    winner_info?: WinnerInfo;
    can_start_new_game: boolean;
}

handleInitialStateCompleted(message: { data: CompletedState, timestamp: number }) {
    const state = message.data;
    
    // Update common UI
    this.updatePlayerList(state.common.players);
    this.updateGameInfo(state.common.match_info);
    
    // Display final game results
    this.displayGameResults(state.final_scores);
    this.showResultType(state.final_scores.result_type);
    this.updateFinalScores(state.final_scores);
    
    // Display cross/rubber scores
    this.updateCrossScores(state.cross_scores);
    this.highlightOnHookPlayers(state.cross_scores);
    
    // Show winner information if cross complete
    if (state.winner_info) {
        this.displayCrossWinner(state.winner_info);
        this.showWinnerCelebration(state.winner_info);
        
        if (state.winner_info.double_victory) {
            this.showDoubleVictoryIndicator();
        }
    }
    
    // Show new game option for host
    if (state.can_start_new_game) {
        this.showNewGameButton();
    } else if (state.winner_info) {
        this.showNewRubberButton();
    }
    
    this.lastSnapshotTime = message.timestamp;
}

displayGameResults(results: GameResult) {
    const resultElement = document.getElementById('game-results');
    resultElement.innerHTML = `
        <div class="result-header">
            <h2>${results.result_type}</h2>
            <p>${results.description}</p>
        </div>
        <div class="score-summary">
            <div class="trump-team">
                <h3>Trump Team (${results.trump_suit})</h3>
                <p>Tricks: ${results.trump_team_tricks}/8</p>
                <p>Points: ${results.trump_team_final_points}/120</p>
                <p>Cross Score: ${results.trump_team_score}</p>
            </div>
            <div class="opponent-team">
                <h3>Opponents</h3>
                <p>Tricks: ${results.opponent_team_tricks}/8</p>
                <p>Points: ${results.opponent_team_final_points}/120</p>
                <p>Cross Score: ${results.opponent_team_score}</p>
            </div>
        </div>
    `;
}

updateCrossScores(crossScores: CrossScores) {
    const crossElement = document.getElementById('cross-scores');
    crossElement.innerHTML = `
        <div class="cross-display">
            <div class="trump-team ${crossScores.trump_team_on_hook ? 'on-hook' : ''}">
                <h3>Trump Team</h3>
                <p>Remaining: ${crossScores.trump_team_remaining}/24</p>
                <p>Crosses: ${crossScores.trump_team_crosses}</p>
                ${crossScores.trump_team_on_hook ? '<span class="hook-indicator">On the Hook!</span>' : ''}
            </div>
            <div class="opponent-team ${crossScores.opponent_team_on_hook ? 'on-hook' : ''}">
                <h3>Opponents</h3>
                <p>Remaining: ${crossScores.opponent_team_remaining}/24</p>
                <p>Crosses: ${crossScores.opponent_team_crosses}</p>
                ${crossScores.opponent_team_on_hook ? '<span class="hook-indicator">On the Hook!</span>' : ''}
            </div>
        </div>
    `;
}
```

### **5. Additional Features**

#### **5.1 Game Statistics**
```rust
// Optional: Add game statistics for completed games
pub struct GameStatistics {
    pub game_duration_minutes: u32,
    pub total_bids_made: u8,
    pub redeal_count: u8,
    pub highest_bid: BidInfo,
    pub vol_achieved: bool,
    pub close_game: bool,  // Final score difference < 10 points
}

impl StateBuilder {
    async fn build_game_statistics(
        game_id: &str,
        redis_conn: &mut Connection,
    ) -> Result<Option<GameStatistics>, Box<dyn std::error::Error>> {
        // Get game statistics if stored
        let stats_key = format!("game_stats:{}", game_id);
        let stats_data: Option<String> = redis::cmd("GET")
            .arg(&stats_key)
            .query_async(redis_conn)
            .await?;
        
        if let Some(data) = stats_data {
            let stats: GameStatistics = serde_json::from_str(&data)?;
            Ok(Some(stats))
        } else {
            Ok(None)
        }
    }
}
```

### **6. Performance Optimizations**

#### **6.1 Parallel Data Fetching**
```rust
// Optimized version with parallel fetching
pub async fn build_completed_state_optimized(
    game_id: &str,
    user_id: &str,
    timestamp: i64,
    redis_conn: &mut Connection,
) -> Result<CompletedStateData, Box<dyn std::error::Error>> {
    // Get match ID first
    let common_state = Self::build_common_state(game_id, timestamp, redis_conn).await?;
    let match_id = &common_state.match_info.id;
    
    // Parallel fetch of all completed state components
    let (final_scores, cross_scores, can_start_new_game) = tokio::try_join!(
        Self::build_game_results(game_id, redis_conn),
        Self::build_cross_scores(match_id, redis_conn),
        Self::can_start_new_game(game_id, user_id, &CrossScores::default(), redis_conn)
    )?;
    
    // Build winner info (depends on cross scores)
    let winner_info = Self::build_winner_info(
        &final_scores, 
        &cross_scores, 
        game_id, 
        redis_conn
    ).await?;
    
    Ok(CompletedStateData {
        common: common_state,
        final_scores,
        cross_scores,
        winner_info,
        can_start_new_game,
    })
}
```

## Success Criteria
- ✅ Players joining completed games see full results and context
- ✅ Game results display correctly (Vol, Normal Win, point breakdown)
- ✅ Cross/rubber scores and progression shown accurately
- ✅ Winner information displayed when cross complete
- ✅ New game options available only to host when appropriate
- ✅ Double victory scenarios handled correctly
- ✅ Performance acceptable with parallel Redis operations

## Next: Performance Testing & Optimization (Step 6)
Comprehensive testing, load testing, and final optimizations for the complete sync-on-load system.
