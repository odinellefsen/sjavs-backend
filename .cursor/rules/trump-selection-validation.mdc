---
description: 
globs: 
alwaysApply: false
---
# Trump Selection Validation - Complete Backend Flow

## Overview
This document details the complete validation flow for the trump selection phase of Sjavs. Every player action must be rigorously validated against the Redis database state before any state changes occur. The Redis database serves as the single source of truth for all game state.

## Game State Architecture

### Redis Data Structure
```
game:{game_id} = {
    status: "waiting" | "dealing" | "bidding" | "trump_declaration" | "playing" | "completed",
    dealer_position: 0-3,
    current_bidder: 0-3,
    players: [
        { user_id: "user1", position: 0, hand: ["AS", "KH", ...], ready: true },
        { user_id: "user2", position: 1, hand: ["QC", "JD", ...], ready: true },
        { user_id: "user3", position: 2, hand: ["10S", "9H", ...], ready: true },
        { user_id: "user4", position: 3, hand: ["7C", "8D", ...], ready: true }
    ],
    bidding: {
        current_highest_length: 0,
        current_highest_bidder: null,
        bid_history: [
            { player_position: 0, bid_length: 5, passed: false },
            { player_position: 1, bid_length: null, passed: true }
        ],
        bidding_complete: false
    },
    trump: {
        suit: null,
        declared_by: null
    },
    created_at: timestamp,
    updated_at: timestamp
}
```

## Trump Selection Phase Validation Flow

### Phase 1: Game Initialization & Dealing

#### 1.1 Start New Game Request
**Endpoint**: `POST /game/start`
**Request**: `{ "game_id": "match-123" }`

**Validation Sequence**:
1. **Match Existence**: Verify `game:{game_id}` exists in Redis
2. **Player Count**: Ensure exactly 4 players in the match
3. **Player Readiness**: All players must be in "ready" state
4. **Game Status**: Game must be in "waiting" status
5. **Player Authentication**: Validate requesting user is in the match

**Success Actions**:
- Set `status = "dealing"`
- Initialize deck (32 cards)
- Deal 8 cards to each player
- Store hands in Redis
- Set `dealer_position` (random for first game, rotate for subsequent)
- Set `current_bidder = (dealer_position + 1) % 4`
- Set `status = "bidding"`
- Broadcast game state to all players

**Failure Cases**:
- Return 404 if game not found
- Return 400 if not enough players or players not ready
- Return 409 if game already in progress
- Return 403 if requesting user not in game

#### 1.2 Deal Validation
**Internal Process** (no direct endpoint)

**Critical Validations**:
1. **Deck Integrity**: Ensure exactly 32 cards (no 2s-6s)
2. **Hand Distribution**: Each player gets exactly 8 cards
3. **No Duplicates**: No card appears in multiple hands
4. **Complete Distribution**: All 32 cards distributed

### Phase 2: Bidding Process

#### 2.1 Place Bid Request
**Endpoint**: `POST /game/bid`
**Request**: `{ "game_id": "match-123", "bid_length": 6, "trump_suit": "clubs" }`

**Pre-Validation Sequence**:
1. **Game Existence**: Verify `game:{game_id}` exists
2. **Game Status**: Must be in "bidding" status
3. **Player Authentication**: Validate user is in this game
4. **Turn Validation**: Must be requesting player's turn to bid
5. **Bidding Status**: Bidding must not be complete

**Turn Validation Logic**:
```rust
fn validate_bidding_turn(game_state: &GameState, user_id: &str) -> Result<(), ValidationError> {
    let player_position = game_state.get_player_position(user_id)?;
    let expected_bidder = game_state.bidding.current_bidder;
    
    if player_position != expected_bidder {
        return Err(ValidationError::NotYourTurn);
    }
    Ok(())
}
```

**Bid Validation Logic**:
```rust
fn validate_bid(game_state: &GameState, player_position: usize, bid_length: u8, trump_suit: Suit) -> Result<(), ValidationError> {
    let player_hand = &game_state.players[player_position].hand;
    
    if bid_length < 5 {
        return Err(ValidationError::BidTooLow);
    }
    
    // Check if player actually has claimed trump count in specified suit
    let actual_trump_count = calculate_trump_count(player_hand, trump_suit);
    if actual_trump_count != bid_length {
        return Err(ValidationError::BidExceedsActualTrumps);
    }
    
    // Check if bid is better than current highest
    let current_highest = game_state.bidding.current_highest_length;
    if bid_length < current_highest {
        return Err(ValidationError::BidNotBetter);
    }
    
    if bid_length == current_highest {
        // Same length only valid if declaring clubs
        if trump_suit != Suit::Clubs {
            return Err(ValidationError::BidNotBetter);
        }
    }
    
    Ok(())
}
```

**Trump Count Calculation**:
```rust
fn calculate_trump_count(hand: &[Card], trump_suit: Suit) -> u8 {
    let permanent_trumps = [
        Card::new(Suit::Clubs, Rank::Queen),
        Card::new(Suit::Spades, Rank::Queen),
        Card::new(Suit::Clubs, Rank::Jack),
        Card::new(Suit::Spades, Rank::Jack),
        Card::new(Suit::Hearts, Rank::Jack),
        Card::new(Suit::Diamonds, Rank::Jack),
    ];
    
    let mut count = 0;
    
    for card in hand {
        // Count permanent trumps
        if permanent_trumps.contains(card) {
            count += 1;
        }
        // Count suit trumps (excluding permanent trumps)
        else if card.suit == trump_suit {
            count += 1;
        }
    }
    
    count
}
```

**Success Actions**:
- Update `bidding.current_highest_length`
- Update `bidding.current_highest_bidder`
- Store `trump.suit` (private to backend, not broadcast until bidding complete)
- Add bid to `bidding.bid_history` (only length visible to other players)
- Advance `current_bidder` to next player
- Broadcast updated bidding state (trump suit hidden)

#### 2.2 Pass Bid Request
**Endpoint**: `POST /game/pass`
**Request**: `{ "game_id": "match-123" }`

**Validation Sequence**:
1. Same pre-validations as bid request
2. **Pass Validity**: Ensure player hasn't already passed in this round

**Success Actions**:
- Add pass to `bidding.bid_history`
- Advance `current_bidder` to next player
- Check if bidding is complete

#### 2.3 Bidding Completion Check
**Internal Logic** (triggered after each bid/pass)

**Completion Conditions**:
1. **All Players Acted**: Every player has either bid or passed
2. **Winner Determined**: One player has the highest valid bid
3. **No Valid Bids**: All players passed (triggers automatic re-deal)

**Completion Logic**:
```rust
fn check_bidding_completion(game_state: &mut GameState) -> Result<(), ValidationError> {
    let all_players_acted = game_state.bidding.bid_history.len() >= 4;
    
    if !all_players_acted {
        return Ok(()); // Bidding continues
    }
    
    // Find highest bidder
    let highest_bidder = game_state.bidding.current_highest_bidder;
    
    if highest_bidder.is_none() {
        // All players passed - automatic re-deal
        auto_redeal_until_valid_hands(game_state)?;
        return Ok(());
    }
    
    // Bidding complete, trump suit already known from winning bid
    game_state.status = GameStatus::Playing;
    game_state.bidding.bidding_complete = true;
    
    // Set first leader (dealer's left neighbor)
    game_state.current_leader = (game_state.dealer_position + 1) % 4;
    
    Ok(())
}

fn auto_redeal_until_valid_hands(game_state: &mut GameState) -> Result<(), ValidationError> {
    const MAX_REDEAL_ATTEMPTS: u32 = 100; // Prevent infinite loops
    
    for _ in 0..MAX_REDEAL_ATTEMPTS {
        // Generate new hands
        deal_new_hands(game_state)?;
        
        // Check if any player has valid bid (5+ trumps in any suit)
        if any_player_has_valid_bid(game_state) {
            // Reset bidding state and start new bidding round
            reset_bidding_state(game_state);
            game_state.status = GameStatus::Bidding;
            return Ok(());
        }
    }
    
    Err(ValidationError::UnableToGenerateValidHands)
}
```

### Phase 3: Trump Information Revelation

When bidding completes, the trump suit is already determined from the winning bid. The system reveals the trump information to all players:

**Trump Revelation Process**:
1. **Winning Bid Identified**: Highest bid with trump suit already specified
2. **Information Broadcast**: All players learn the trump suit for first time
3. **Game State Update**: Trump suit stored in Redis game state
4. **Status Transition**: Game moves directly to "playing" status

**No Additional Validation Required**: Trump suit was already validated during the bid placement.

## Error Handling & Response Codes

### Validation Error Types
```rust
#[derive(Debug, Clone)]
pub enum ValidationError {
    // Game state errors
    GameNotFound,
    GameNotInCorrectStatus,
    PlayerNotInGame,
    
    // Turn-based errors
    NotYourTurn,
    ActionNotAllowed,
    
    // Bidding errors
    BidTooLow,
    BidNotBetter,
    BidExceedsActualTrumps,
    AlreadyPassed,
    
    // Auto-deal errors
    UnableToGenerateValidHands,
    
    // Technical errors
    RedisConnectionFailed,
    SerializationError,
}
```

### HTTP Response Mapping
- **400 Bad Request**: Invalid bid values, malformed requests
- **403 Forbidden**: Not your turn, not authorized to declare trump
- **404 Not Found**: Game doesn't exist
- **409 Conflict**: Game in wrong state, action not allowed
- **500 Internal Server Error**: Redis connection issues, serialization errors

## Security Considerations

### Anti-Cheat Measures
1. **Hand Verification**: All trump count validations check actual cards in Redis
2. **Turn Enforcement**: Strict turn-based validation prevents out-of-order actions
3. **State Consistency**: Every action validates current game state before execution
4. **Immutable History**: Bid history is append-only for audit trail
5. **Player Identity**: JWT validation ensures only authenticated players can act

### Redis Security
1. **Atomic Operations**: Use Redis transactions for state updates
2. **Data Isolation**: Each game has separate Redis keys
3. **Expiration**: Set TTL on game data to prevent stale state
4. **Backup Validation**: Critical validations run against fresh Redis reads

## Client-Server Communication Protocol

This section defines the complete communication contract between the Sjavs backend and any frontend implementation. This enables loose coupling and allows multiple frontend implementations while maintaining game integrity.

### Server Responsibilities (What Backend Manages)
- **Game State Authority**: Complete game state stored in Redis (hands, scores, turn order)
- **Action Validation**: All game rule enforcement and cheat prevention
- **Player Authentication**: JWT validation and user authorization
- **State Persistence**: Game state preservation across connections
- **Rule Enforcement**: Bidding rules, trump calculations, turn validation
- **Anti-Cheat**: Hand verification, action authorization, state consistency

### Client Responsibilities (What Frontend Manages)
- **UI Rendering**: Visual representation of game state
- **User Input**: Capturing and transmitting player actions
- **Local Validation**: Pre-validation for better UX (optional)
- **State Display**: Showing available actions and game information
- **Connection Management**: WebSocket connection handling
- **Error Display**: Presenting validation errors to users

---

## Server-to-Client Communication

### WebSocket Events (Server → Client)

#### Game State Update Event
Sent whenever game state changes that affects client UI.

```typescript
interface GameStateUpdate {
  type: 'game_state_update';
  data: {
    gameId: string;
    status: 'waiting' | 'dealing' | 'bidding' | 'playing' | 'completed';
    dealerPosition: number;
    currentBidder?: number; // Only during bidding phase
    currentLeader?: number; // Only during playing phase
    players: Array<{
      userId: string;
      position: number;
      ready: boolean;
      cardCount: number; // Number of cards in hand (not the actual cards)
    }>;
    bidding: {
      currentHighestLength: number;
      currentHighestBidder: number | null;
      biddingComplete: boolean;
      bidHistory: Array<{
        playerPosition: number;
        bidLength: number | null; // null means passed
        timestamp: number;
      }>;
    };
    trump: {
      suit: string | null; // Only revealed when bidding complete
      declaredBy: number | null;
    };
    myData: {
      position: number;
      hand: string[]; // Only this player's cards
      availableActions: AvailableActions;
    };
  };
}
```

#### Available Actions Structure
```typescript
interface AvailableActions {
  canBid: boolean;
  canPass: boolean;
  availableBids: Array<{
    length: number;
    suit: string;
    displayText: string; // "6 trumps (clubs)"
  }>;
}
```

#### Bidding Update Event
Sent when a player places a bid or passes.

```typescript
interface BiddingUpdate {
  type: 'bidding_update';
  data: {
    gameId: string;
    playerPosition: number;
    action: 'bid' | 'pass';
    bidLength?: number; // Only for bids
    displayText: string; // "Player 2 bid 6 trumps" or "Player 3 passed"
    nextBidder: number | null; // null if bidding complete
    biddingComplete: boolean;
    trumpRevealed?: {
      suit: string;
      declaredBy: number;
    };
  };
}
```

#### Trump Revelation Event
Sent when bidding completes and trump suit is revealed.

```typescript
interface TrumpRevelation {
  type: 'trump_revealed';
  data: {
    gameId: string;
    trumpSuit: string;
    declaredBy: number;
    trumpTeam: {
      declarer: number;
      partner: number;
    };
    message: string; // "Hearts are trump! Player 2 and Player 0 are the trump team."
  };
}
```

#### Error Event
Sent when client action is rejected.

```typescript
interface GameError {
  type: 'game_error';
  data: {
    gameId: string;
    errorCode: string;
    message: string;
    details?: Record<string, any>;
  };
}
```

---

## Client-to-Server Communication

### HTTP Endpoints

#### Start Game
```http
POST /game/start
Authorization: Bearer <jwt_token>
Content-Type: application/json

{
  "gameId": "match-123"
}
```

**Success Response (200)**:
```json
{
  "status": "success",
  "message": "Game started successfully",
  "gameId": "match-123"
}
```

#### Place Bid
```http
POST /game/bid
Authorization: Bearer <jwt_token>
Content-Type: application/json

{
  "gameId": "match-123",
  "bidLength": 6,
  "trumpSuit": "clubs"
}
```

**Success Response (200)**:
```json
{
  "status": "success",
  "message": "Bid placed successfully",
  "bid": {
    "length": 6,
    "suit": "clubs"
  },
  "nextBidder": 2
}
```

#### Pass Bid
```http
POST /game/pass
Authorization: Bearer <jwt_token>
Content-Type: application/json

{
  "gameId": "match-123"
}
```

**Success Response (200)**:
```json
{
  "status": "success",
  "message": "Passed successfully",
  "nextBidder": 3
}
```

### WebSocket Messages (Client → Server)

#### Request Game State
```typescript
interface RequestGameState {
  type: 'request_game_state';
  data: {
    gameId: string;
  };
}
```

---

## Frontend Implementation Guide

### State Management Pattern

```typescript
class GameStateManager {
  private gameState: GameState | null = null;
  private websocket: WebSocket;
  
  // Handle incoming WebSocket events
  handleWebSocketMessage(event: MessageEvent) {
    const message = JSON.parse(event.data);
    
    switch (message.type) {
      case 'game_state_update':
        this.updateGameState(message.data);
        break;
      case 'bidding_update':
        this.handleBiddingUpdate(message.data);
        break;
      case 'trump_revealed':
        this.handleTrumpRevelation(message.data);
        break;
      case 'game_error':
        this.handleError(message.data);
        break;
    }
  }
  
  // Make HTTP requests to server
  async placeBid(gameId: string, length: number, suit: string) {
    const response = await fetch('/game/bid', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.getJwtToken()}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ gameId, bidLength: length, trumpSuit: suit })
    });
    
    if (!response.ok) {
      const error = await response.json();
      this.handleHttpError(error);
    }
  }
}
```

### UI Update Patterns

#### Bidding Phase UI
```typescript
interface BiddingPhaseState {
  currentBidder: number;
  myTurn: boolean;
  availableBids: Array<{
    length: number;
    suit: string;
    displayText: string;
    disabled: boolean;
  }>;
  canPass: boolean;
  bidHistory: Array<{
    playerPosition: number;
    displayText: string; // "Player 2: 6 trumps" or "Player 3: Passed"
    timestamp: number;
  }>;
}

// Example UI update function
function updateBiddingUI(gameState: GameState) {
  const biddingState: BiddingPhaseState = {
    currentBidder: gameState.currentBidder,
    myTurn: gameState.currentBidder === gameState.myData.position,
    availableBids: gameState.myData.availableActions.availableBids.map(bid => ({
      ...bid,
      disabled: !gameState.myData.availableActions.canBid
    })),
    canPass: gameState.myData.availableActions.canPass,
    bidHistory: gameState.bidding.bidHistory.map(entry => ({
      playerPosition: entry.playerPosition,
      displayText: entry.bidLength 
        ? `Player ${entry.playerPosition + 1}: ${entry.bidLength} trumps`
        : `Player ${entry.playerPosition + 1}: Passed`,
      timestamp: entry.timestamp
    }))
  };
  
  renderBiddingInterface(biddingState);
}
```

### Error Handling

#### Error Code Mapping
```typescript
const ERROR_MESSAGES = {
  'GAME_NOT_FOUND': 'Game not found. Please check the game ID.',
  'NOT_YOUR_TURN': 'It\'s not your turn to bid.',
  'BID_TOO_LOW': 'Your bid must be at least 5 trumps.',
  'BID_NOT_BETTER': 'Your bid must be higher than the current bid.',
  'BID_EXCEEDS_ACTUAL_TRUMPS': 'You don\'t have that many trumps in the specified suit.',
  'ALREADY_PASSED': 'You have already passed this round.',
  'GAME_NOT_IN_CORRECT_STATUS': 'Invalid action for current game state.'
};

function handleGameError(error: GameError) {
  const userMessage = ERROR_MESSAGES[error.data.errorCode] || error.data.message;
  displayErrorToUser(userMessage);
  
  // Optional: Log technical details for debugging
  console.error('Game error:', error.data);
}
```

### Connection Management

```typescript
class WebSocketManager {
  private ws: WebSocket | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  
  connect(gameId: string) {
    this.ws = new WebSocket(`/ws/game/${gameId}`);
    
    this.ws.onopen = () => {
      this.reconnectAttempts = 0;
      this.requestGameState(gameId);
    };
    
    this.ws.onclose = () => {
      if (this.reconnectAttempts < this.maxReconnectAttempts) {
        setTimeout(() => {
          this.reconnectAttempts++;
          this.connect(gameId);
        }, 1000 * Math.pow(2, this.reconnectAttempts));
      }
    };
    
    this.ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
  }
  
  private requestGameState(gameId: string) {
    this.send({
      type: 'request_game_state',
      data: { gameId }
    });
  }
  
  send(message: any) {
    if (this.ws?.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message));
    }
  }
}
```

---

## Data Privacy & Security

### Information Hiding
- **Player Hands**: Only sent to the respective player
- **Trump Suits**: Hidden until bidding complete
- **Future Actions**: Server doesn't reveal upcoming player decisions
- **Validation Details**: Error messages don't leak internal state

### Client-Side Security
- **No Sensitive Storage**: Don't store other players' cards or hidden information
- **JWT Handling**: Secure token storage and transmission
- **Input Validation**: Pre-validate user inputs before server requests
- **State Verification**: Periodically sync with server state

This protocol ensures that any frontend implementation can integrate with the Sjavs backend while maintaining game integrity and providing a consistent user experience.

This validation framework ensures complete game integrity while providing clear feedback to both honest players and preventing exploitation by bad actors.
