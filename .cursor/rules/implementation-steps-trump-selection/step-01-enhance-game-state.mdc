---
description: 
globs: 
alwaysApply: false
---
# Step 1: Enhance Game State Management

## Overview
Extend the current `NormalMatchStatus` enum and add detailed game state tracking to support the trump selection phase. This builds on the existing "waiting" state to add "dealing", "bidding", and transition to "playing".

## Current State Analysis
The project currently has:
- ✅ Basic match status: `Waiting`, `InProgress`, `Completed`, `Cancelled`
- ✅ Match creation, joining, leaving
- ✅ Redis persistence with match and player repositories
- ✅ 4-digit PIN codes for joining

## Implementation Tasks

### 1.1 Extend Match Status Enum

**File**: `src/redis/normal_match/id.rs`

**Current enum** (around line 6):
```rust
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum NormalMatchStatus {
    Waiting,
    InProgress,
    Completed,
    Cancelled,
}
```

**Enhanced enum**:
```rust
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum NormalMatchStatus {
    Waiting,     // Players joining, waiting to start
    Dealing,     // Cards being dealt to players
    Bidding,     // Trump suit selection phase
    Playing,     // Main game (trick-taking)
    Completed,   // Game finished
    Cancelled,   // Game cancelled
}
```

**Update the ToString implementation** (around line 14):
```rust
impl ToString for NormalMatchStatus {
    fn to_string(&self) -> String {
        match self {
            NormalMatchStatus::Waiting => "waiting".to_string(),
            NormalMatchStatus::Dealing => "dealing".to_string(),
            NormalMatchStatus::Bidding => "bidding".to_string(),
            NormalMatchStatus::Playing => "playing".to_string(),
            NormalMatchStatus::Completed => "completed".to_string(),
            NormalMatchStatus::Cancelled => "cancelled".to_string(),
        }
    }
}
```

**Update the From<&str> implementation** (around line 25):
```rust
impl From<&str> for NormalMatchStatus {
    fn from(s: &str) -> Self {
        match s {
            "waiting" => NormalMatchStatus::Waiting,
            "dealing" => NormalMatchStatus::Dealing,
            "bidding" => NormalMatchStatus::Bidding,
            "playing" => NormalMatchStatus::Playing,
            "completed" => NormalMatchStatus::Completed,
            "cancelled" => NormalMatchStatus::Cancelled,
            _ => NormalMatchStatus::Waiting, // Default to waiting
        }
    }
}
```

### 1.2 Add Game State Fields to NormalMatch

**File**: `src/redis/normal_match/id.rs`

**Current struct** (around line 35):
```rust
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NormalMatch {
    pub id: String,
    pub pin: u32,
    pub status: NormalMatchStatus,
    pub number_of_crosses: u32,
    pub current_cross: u32,
    pub created_timestamp: u64,
}
```

**Enhanced struct**:
```rust
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NormalMatch {
    pub id: String,
    pub pin: u32,
    pub status: NormalMatchStatus,
    pub number_of_crosses: u32,
    pub current_cross: u32,
    pub created_timestamp: u64,
    
    // Game state fields
    pub dealer_position: Option<usize>,     // Position 0-3, None if not started
    pub current_bidder: Option<usize>,      // Current player bidding, None if not bidding
    pub current_leader: Option<usize>,      // Current trick leader, None if not playing
    pub trump_suit: Option<String>,         // "hearts", "diamonds", "clubs", "spades"
    pub trump_declarer: Option<usize>,      // Who declared trump
    
    // Bidding state
    pub highest_bid_length: Option<u8>,     // Highest bid trump count
    pub highest_bidder: Option<usize>,      // Who has highest bid
}
```

### 1.3 Update Redis Serialization Methods

**File**: `src/redis/normal_match/id.rs`

**Update from_redis_hash method** (around line 65):
```rust
pub fn from_redis_hash(id: String, hash: &HashMap<String, String>) -> Result<Self, String> {
    let pin = hash.get("pin")
        .ok_or("Missing pin field")?
        .parse::<u32>()
        .map_err(|_| "Invalid pin format")?;

    let status = hash.get("status")
        .map(|s| NormalMatchStatus::from(s.as_str()))
        .unwrap_or(NormalMatchStatus::Waiting);

    let number_of_crosses = hash.get("number_of_crosses")
        .ok_or("Missing number_of_crosses field")?
        .parse::<u32>()
        .map_err(|_| "Invalid number_of_crosses format")?;

    let current_cross = hash.get("current_cross")
        .ok_or("Missing current_cross field")?
        .parse::<u32>()
        .map_err(|_| "Invalid current_cross format")?;

    let created_timestamp = hash.get("created_timestamp")
        .ok_or("Missing created_timestamp field")?
        .parse::<u64>()
        .map_err(|_| "Invalid created_timestamp format")?;

    // Parse optional game state fields
    let dealer_position = hash.get("dealer_position")
        .and_then(|s| s.parse::<usize>().ok());
        
    let current_bidder = hash.get("current_bidder")
        .and_then(|s| s.parse::<usize>().ok());
        
    let current_leader = hash.get("current_leader")
        .and_then(|s| s.parse::<usize>().ok());
        
    let trump_suit = hash.get("trump_suit").cloned();
    
    let trump_declarer = hash.get("trump_declarer")
        .and_then(|s| s.parse::<usize>().ok());
        
    let highest_bid_length = hash.get("highest_bid_length")
        .and_then(|s| s.parse::<u8>().ok());
        
    let highest_bidder = hash.get("highest_bidder")
        .and_then(|s| s.parse::<usize>().ok());

    Ok(Self {
        id,
        pin,
        status,
        number_of_crosses,
        current_cross,
        created_timestamp,
        dealer_position,
        current_bidder,
        current_leader,
        trump_suit,
        trump_declarer,
        highest_bid_length,
        highest_bidder,
    })
}
```

**Update to_redis_hash method** (around line 105):
```rust
pub fn to_redis_hash(&self) -> HashMap<String, String> {
    let mut hash = HashMap::new();
    hash.insert("id".to_string(), self.id.clone());
    hash.insert("pin".to_string(), self.pin.to_string());
    hash.insert("status".to_string(), self.status.to_string());
    hash.insert("number_of_crosses".to_string(), self.number_of_crosses.to_string());
    hash.insert("current_cross".to_string(), self.current_cross.to_string());
    hash.insert("created_timestamp".to_string(), self.created_timestamp.to_string());
    
    // Add optional game state fields
    if let Some(dealer) = self.dealer_position {
        hash.insert("dealer_position".to_string(), dealer.to_string());
    }
    if let Some(bidder) = self.current_bidder {
        hash.insert("current_bidder".to_string(), bidder.to_string());
    }
    if let Some(leader) = self.current_leader {
        hash.insert("current_leader".to_string(), leader.to_string());
    }
    if let Some(ref suit) = self.trump_suit {
        hash.insert("trump_suit".to_string(), suit.clone());
    }
    if let Some(declarer) = self.trump_declarer {
        hash.insert("trump_declarer".to_string(), declarer.to_string());
    }
    if let Some(length) = self.highest_bid_length {
        hash.insert("highest_bid_length".to_string(), length.to_string());
    }
    if let Some(bidder) = self.highest_bidder {
        hash.insert("highest_bidder".to_string(), bidder.to_string());
    }
    
    hash
}
```

### 1.4 Add State Transition Helper Methods

**File**: `src/redis/normal_match/id.rs`

**Add implementation block** (at end of file):
```rust
impl NormalMatch {
    /// Check if match can start (has 4 players)
    pub fn can_start(&self) -> bool {
        self.status == NormalMatchStatus::Waiting
        // Note: Player count check will be added when we integrate with player tracking
    }
    
    /// Start the dealing phase
    pub fn start_dealing(&mut self, dealer_position: usize) {
        if self.can_start() {
            self.status = NormalMatchStatus::Dealing;
            self.dealer_position = Some(dealer_position);
            self.current_bidder = Some((dealer_position + 1) % 4); // Left of dealer bids first
        }
    }
    
    /// Start the bidding phase
    pub fn start_bidding(&mut self) {
        if self.status == NormalMatchStatus::Dealing {
            self.status = NormalMatchStatus::Bidding;
        }
    }
    
    /// Complete bidding and move to playing
    pub fn complete_bidding(&mut self, trump_suit: String, trump_declarer: usize) {
        if self.status == NormalMatchStatus::Bidding {
            self.status = NormalMatchStatus::Playing;
            self.trump_suit = Some(trump_suit);
            self.trump_declarer = Some(trump_declarer);
            self.current_bidder = None;
            
            // Set first leader (left of dealer)
            if let Some(dealer) = self.dealer_position {
                self.current_leader = Some((dealer + 1) % 4);
            }
        }
    }
    
    /// Update bidding state
    pub fn update_bid(&mut self, bidder: usize, bid_length: u8) {
        self.highest_bid_length = Some(bid_length);
        self.highest_bidder = Some(bidder);
        // Move to next bidder
        self.current_bidder = Some((bidder + 1) % 4);
    }
    
    /// Reset to initial state (for re-dealing)
    pub fn reset_for_redeal(&mut self) {
        self.status = NormalMatchStatus::Dealing;
        self.current_bidder = self.dealer_position.map(|d| (d + 1) % 4);
        self.highest_bid_length = None;
        self.highest_bidder = None;
        self.trump_suit = None;
        self.trump_declarer = None;
    }
}
```

## Testing the Enhanced State

### Test State Transitions
```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_match_state_transitions() {
        let mut match_obj = NormalMatch::new("test".to_string(), 1234, 3);
        
        // Initial state
        assert_eq!(match_obj.status, NormalMatchStatus::Waiting);
        
        // Start dealing
        match_obj.start_dealing(0);
        assert_eq!(match_obj.status, NormalMatchStatus::Dealing);
        assert_eq!(match_obj.dealer_position, Some(0));
        assert_eq!(match_obj.current_bidder, Some(1));
        
        // Start bidding
        match_obj.start_bidding();
        assert_eq!(match_obj.status, NormalMatchStatus::Bidding);
        
        // Complete bidding
        match_obj.complete_bidding("hearts".to_string(), 2);
        assert_eq!(match_obj.status, NormalMatchStatus::Playing);
        assert_eq!(match_obj.trump_suit, Some("hearts".to_string()));
        assert_eq!(match_obj.trump_declarer, Some(2));
    }
}
```

## Integration Points

### Next Steps Dependencies
1. **Step 2**: Player hand management (needs these status transitions)
2. **Step 3**: Card deck creation (triggered by `Dealing` status)
3. **Step 4**: Bidding endpoints (use `Bidding` status validation)
4. **Step 5**: WebSocket events (broadcast status changes)

### API Schema Updates
The `MatchState` schema in `src/api/schemas.rs` will need updates to include the new fields.

### Repository Updates
The `NormalMatchRepository` will automatically handle the new fields through the updated serialization methods.

This enhancement provides the foundation for all trump selection functionality while maintaining backward compatibility with existing match management features.
