---
description: 
globs: 
alwaysApply: false
---
# Step 1: Current State Analysis & Trick Phase Foundation

## Current Implementation State

### ✅ What We Have (Post-Bidding Phase)

**Game State Management:**
- `NormalMatchStatus::Playing` - Game transitions to this after bidding
- `current_leader: Option<usize>` - Set to left of dealer when bidding completes
- `trump_suit: Option<String>` - Determined during bidding phase
- `trump_declarer: Option<usize>` - Player who won the bidding

**Card Management:**
- Cards dealt and stored in Redis per player
- `Hand` objects with card codes and trump counting
- `Card::beats()` method for trick-taking comparison
- Trump hierarchy implemented (permanent trumps + suit trumps)

**Player Management:**
- 4-player positions (0-3) established
- Partnership determination logic exists
- Turn rotation (`next_player()` method)

### ❌ What We Need to Build

**1. Trick State Management**
- Current trick number (1-8)
- Cards played in current trick
- Which player played which card
- Lead suit for current trick
- Trick completion tracking

**2. Card Playing System**
- `POST /game/play-card` endpoint
- Follow suit validation
- Legal card play validation
- Turn management within tricks

**3. Trick Resolution**
- Determine trick winner using trump hierarchy
- Award trick to winning team
- Update leader for next trick
- Remove played cards from hands

**4. Point Counting**
- Track card points per trick (A=11, K=4, Q=3, J=2, 10=10)
- Accumulate points per team
- Final point calculation after 8 tricks

**5. Game Scoring System**
- Sjavs scoring rules implementation
- Cross/Rubber point calculation
- Score subtraction from 24-point total
- "Vol" and special scoring detection

**6. Game Completion**
- 8-trick completion detection
- Transition to scoring phase
- Cross/Rubber management
- New game initialization

## Required Data Structures

### Trick State
```rust
pub struct TrickState {
    pub trick_number: u8,           // 1-8
    pub lead_suit: Option<Suit>,    // First card played determines lead
    pub cards_played: Vec<(usize, Card)>, // (player_position, card)
    pub current_player: usize,      // Whose turn to play
    pub trick_winner: Option<usize>, // Winner after 4 cards played
    pub is_complete: bool,          // All 4 cards played
}
```

### Game Scoring
```rust
pub struct GameScore {
    pub trump_team_points: u8,      // Points won by trump declaring team
    pub opponent_team_points: u8,   // Points won by opponents
    pub trump_team_tricks: u8,      // Number of tricks won by trump team
    pub opponent_team_tricks: u8,   // Number of tricks won by opponents
    pub is_vol: bool,              // Trump team won all tricks
    pub is_individual_vol: bool,    // Single player won all tricks
    pub trump_suit: String,         // For club bonus calculation
}
```

### Cross/Rubber State
```rust
pub struct CrossState {
    pub trump_team_score: i8,       // Current score (starts at 24, counts down)
    pub opponent_team_score: i8,    // Current score (starts at 24, counts down)
    pub crosses_won: (u8, u8),      // (trump_team, opponent_team)
    pub is_double_victory: bool,    // Winner reached 0 while opponent still at 24
    pub on_the_hook: (bool, bool),  // (trump_team, opponent_team) at 6 points
    pub next_game_bonus: u8,        // Bonus for next game (tie scenarios)
}
```

## Implementation Priority

### Phase 1: Basic Trick Infrastructure
1. **Trick state storage** - Redis models for trick management
2. **Card playing endpoint** - Basic card submission
3. **Turn validation** - Ensure correct player order

### Phase 2: Trick Rules & Validation  
1. **Follow suit logic** - Must follow suit if possible
2. **Legal card validation** - Check playable cards
3. **Trick completion** - Determine winner, update state

### Phase 3: Point Counting & Scoring
1. **Point accumulation** - Track card points per trick
2. **Team point calculation** - Sum points per partnership
3. **Sjavs scoring rules** - Apply complex scoring matrix

### Phase 4: Game Completion & Cross Management
1. **8-trick completion** - Game end detection
2. **Cross/Rubber scoring** - Subtract from 24-point total
3. **New game initialization** - Reset for next game

## File Structure for Implementation

```
src/
├── game/
│   ├── trick.rs          # TrickState management
│   ├── scoring.rs        # Point calculation & Sjavs scoring
│   └── cross.rs          # Cross/Rubber management
├── api/handlers/
│   ├── game_trick.rs     # Card playing endpoints
│   └── game_scoring.rs   # Scoring endpoints
├── redis/
│   ├── trick_state/      # Trick state Redis models
│   └── cross_state/      # Cross/Rubber Redis models
└── websocket/events/
    └── trick_events.rs   # Real-time trick updates
```

## Next Step: Trick State Management

Step 2 will implement the foundational trick state management system, including:
- `TrickState` struct and methods
- Redis storage for current trick
- Basic trick initialization
- Transition from bidding to first trick

This provides the core foundation for all subsequent trick-taking functionality.
